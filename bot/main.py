import telebot
import requests
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "–≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"
BASE_URL = "http://127.0.0.1:5000"  # –ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ API

bot = telebot.TeleBot(BOT_TOKEN)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def registration_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üìú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"))
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîë –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è"), KeyboardButton("üë§ –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    markup.add(KeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"))
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    telegram_id = str(message.chat.id)
    response = requests.get(f"{BASE_URL}/check_user/{telegram_id}")

    if response.status_code == 200 and response.json().get('exists'):
        bot.send_message(
            message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu(),
        )
    else:
        bot.send_message(
            message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ—Ö–æ–∂–µ, –≤—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            reply_markup=registration_menu(),
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@bot.message_handler(func=lambda msg: msg.text == "üìú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
def register_user(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, user123):")
    bot.register_next_step_handler(message, get_nickname)

def get_nickname(message):
    nickname = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, lambda msg: confirm_registration(msg, nickname))

def confirm_registration(message, nickname):
    password = message.text
    data = {
        "telegram_id": str(message.chat.id),
        "tg_nickname": nickname,
        "password": password
    }
    response = requests.post(f"{BASE_URL}/register_user", json=data)
    if response.status_code == 201:
        bot.send_message(
            message.chat.id,
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=main_menu(),
        )
    elif response.status_code == 400:
        bot.send_message(message.chat.id, "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=registration_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=registration_menu())

# –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
@bot.message_handler(func=lambda msg: msg.text == "üîë –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è")
def reset_password(message):
    data = {
        "telegram_id": str(message.chat.id)
    }
    reset_token = requests.post(f"{BASE_URL}/reset_password", json=data).json()['reset_token']
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, process_reset_password, reset_token)

def process_reset_password(message, reset_token):
    new_password = message.text
    data = {
        "telegram_id": str(message.chat.id),
        "new_password": new_password,
        "reset_token": reset_token
    }
    response = requests.post(f"{BASE_URL}/set_new_password", json=data)
    if response.status_code == 200:
        bot.send_message(message.chat.id, "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!", reply_markup=main_menu())
    elif response.status_code == 400:
        bot.send_message(message.chat.id, "‚ö† –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫.", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu())

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@bot.message_handler(func=lambda msg: msg.text == "üë§ –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def show_user_info(message):
    telegram_id = message.chat.id
    response = requests.get(f"{BASE_URL}/show_user_info/{telegram_id}")
    if response.status_code == 200:
        user_data = response.json()
        bot.send_message(
            message.chat.id,
            f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:*\n"
            f"üÜî Telegram ID: {user_data['telegram_id']}\n"
            f"üìõ –ù–∏–∫–Ω–µ–π–º: {user_data['tg_nickname']}\n"
            f"üí• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤: {user_data['clicks']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['register_date']}",
            parse_mode="Markdown",
            reply_markup=main_menu(),
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu())

# –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
@bot.message_handler(func=lambda msg: msg.text == "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
def get_leaders(message):
    response = requests.get(f"{BASE_URL}/get_leaders")
    if response.status_code == 200:
        leaders = response.json()
        leaderboard = "üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:*\n\n"
        for i, user in enumerate(leaders, 1):
            leaderboard += f"{i}. {user['tg_nickname']} ‚Äî {user['clicks']} –∫–ª–∏–∫–æ–≤\n"
        bot.send_message(message.chat.id, leaderboard, parse_mode="Markdown", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@bot.message_handler(func=lambda message: True)
def fallback(message):
    bot.send_message(message.chat.id, "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.infinity_polling()